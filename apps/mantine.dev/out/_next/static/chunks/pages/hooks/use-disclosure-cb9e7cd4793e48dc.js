(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[16002],{5605:(n,e,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-disclosure",function(){return s(63207)}])},63207:(n,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var o=s(31085),l=s(71184),a=s(85954),d=s(38215);let c=(0,a.P)(d.XZ.useDisclosure);function r(n){let e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"use-disclosure"})," hook manages boolean state. It provides ",(0,o.jsx)(e.code,{children:"open"}),", ",(0,o.jsx)(e.code,{children:"close"})," and ",(0,o.jsx)(e.code,{children:"toggle"})," handlers\nand accepts optional ",(0,o.jsx)(e.code,{children:"onOpen"})," and ",(0,o.jsx)(e.code,{children:"onClose"})," callbacks. It can be used to manage controlled modals,\npopovers and other similar components:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useDisclosure } from '@mantine/hooks';\n\nfunction Demo() {\n  const [opened, handlers] = useDisclosure(false);\n\n  // Sets opened to true\n  handlers.open();\n\n  // Sets opened to false\n  handlers.close();\n\n  // Sets opened to true if it was false and vice versa\n  handlers.toggle();\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"callbacks",children:"Callbacks"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"onOpen"})," and ",(0,o.jsx)(e.code,{children:"onClose"})," callbacks are called when opened state changes:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { useDisclosure } from '@mantine/hooks';\n\nfunction Demo() {\n  const [opened, handlers] = useDisclosure(false, {\n    onOpen: () => console.log('Opened'),\n    onClose: () => console.log('Closed'),\n  });\n\n  // Calls onOpen callback and sets opened to true\n  handlers.open();\n\n  // Does nothing, opened is already true\n  handlers.open();\n\n  // Calls onClose callback and sets opened to false\n  handlers.close();\n\n  // Does nothing, opened is already false\n  handlers.close();\n\n  // Calls onOpen or onClose depending on next state\n  handlers.toggle();\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"function useDisclosure(\n  initialState: boolean,\n  callbacks?: {\n    onOpen?(): void;\n    onClose?(): void;\n  }\n): [\n  boolean,\n  {\n    open: () => void;\n    close: () => void;\n    toggle: () => void;\n  },\n];\n"})})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(c,{...n,children:(0,o.jsx)(r,{...n})})}}},n=>{var e=e=>n(n.s=e);n.O(0,[67456,85954,90636,46593,38792],()=>e(5605)),_N_E=n.O()}]);