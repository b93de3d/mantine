(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[52530],{7941:(e,n,r)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/core/portal",function(){return r(49559)}])},49559:(e,n,r)=>{"use strict";r.r(n),r.d(n,{default:()=>s});var t=r(31085),o=r(71184),a=r(85954),l=r(38215);let d=(0,a.P)(l.XZ.Portal);function i(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["Portal is a wrapper component for ",(0,t.jsx)(n.a,{href:"https://reactjs.org/docs/portals.html",children:"ReactDOM.createPortal"})," API.\nRender any component or element at the end of ",(0,t.jsx)(n.code,{children:"document.body"})," or at a given element. ",(0,t.jsx)(n.a,{href:"/core/modal/",children:"Modal"})," and ",(0,t.jsx)(n.a,{href:"/core/drawer/",children:"Drawer"})," components are wrapped in Portal by default."]}),"\n",(0,t.jsxs)(n.p,{children:["Use Portal to render a component or an element at a different place (defaults to the end of ",(0,t.jsx)(n.code,{children:"document.body"}),").\nPortal is useful when you want to prevent parent styles from interfering with children,\nusually all these styles are related to ",(0,t.jsx)(n.code,{children:"position"})," and ",(0,t.jsx)(n.code,{children:"z-index"})," properties\nand portals are used for components with fixed position, for example, modals."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react';\nimport { Portal } from '@mantine/core';\n\nfunction Demo() {\n  const [opened, setOpened] = useState(false);\n\n  return (\n    <main style={{ position: 'relative', zIndex: 1 }}>\n      {opened && (\n        <Portal>\n          <div>Your modal content</div>\n        </Portal>\n      )}\n\n      <button onClick={() => setOpened(true)} type=\"button\">\n        Open modal\n      </button>\n    </main>\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, the div element is rendered outside of parent main (before closing body tag),\nbut still receives ",(0,t.jsx)(n.code,{children:"opened"})," and ",(0,t.jsx)(n.code,{children:"onClose"})," props. The element will not be affected by parent z-index."]}),"\n",(0,t.jsx)(n.h2,{id:"reuse-target-node",children:"Reuse target node"}),"\n",(0,t.jsxs)(n.p,{children:["By default, Portal creates a new target node for each instance. To change this behavior and\nreuse the same target node for all instances, set ",(0,t.jsx)(n.code,{children:"reuseTargetNode"})," prop. In the following\nexample, all three paragraphs will be rendered in the same target node:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Portal } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <>\n      <Portal reuseTargetNode>\n        <p>First</p>\n      </Portal>\n\n      <Portal reuseTargetNode>\n        <p>Second</p>\n      </Portal>\n\n      <Portal reuseTargetNode>\n        <p>Third</p>\n      </Portal>\n    </>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"specify-target-dom-node",children:"Specify target DOM node"}),"\n",(0,t.jsxs)(n.p,{children:["You can specify dom node where portal will be rendered by passing ",(0,t.jsx)(n.code,{children:"target"})," prop:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Portal } from '@mantine/core';\n\nconst container = document.createElement('div');\ndocument.body.appendChild(container);\n\nfunction Demo() {\n  return <Portal target={container}>My portal</Portal>;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, you can specify selector to render portal in existing element:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Portal } from '@mantine/core';\n\nfunction Demo() {\n  return <Portal target=\"#portal-container\">My portal</Portal>;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you don't specify the target element, new one will be created and appended to the ",(0,t.jsx)(n.code,{children:"document.body"})," for each Portal component."]}),"\n",(0,t.jsx)(n.h2,{id:"server-side-rendering",children:"Server side rendering"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"createPortal"})," is not supported during server side rendering.\nAll components inside Portal are rendered only after the application was mounted to the dom."]}),"\n",(0,t.jsx)(n.h2,{id:"optionalportal-component",children:"OptionalPortal component"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"OptionalPortal"})," component lets you configure whether children should be rendered in ",(0,t.jsx)(n.code,{children:"Portal"}),".\nIt accepts the same props as the ",(0,t.jsx)(n.code,{children:"Portal"})," component:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { OptionalPortal } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <>\n      <OptionalPortal withinPortal>\n        This text is rendered in Portal\n      </OptionalPortal>\n      <OptionalPortal withinPortal={false}>\n        This text is rendered as regular child\n      </OptionalPortal>\n    </>\n  );\n}\n"})})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(d,{...e,children:(0,t.jsx)(i,{...e})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[67456,85954,90636,46593,38792],()=>n(7941)),_N_E=e.O()}]);