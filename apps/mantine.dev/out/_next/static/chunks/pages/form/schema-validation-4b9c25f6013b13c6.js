(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[75756],{16961:(e,n,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/form/schema-validation",function(){return t(29445)}])},29445:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>m});var a=t(31085),s=t(71184),r=t(85954),o=t(38215);let i=(0,r.P)(o.XZ.formSchemaValidation);function l(e){let n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{InstallScript:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("InstallScript",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"schema-based-validation",children:"Schema based validation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"@mantine/form"})," supports schema validation with:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/zod",children:"zod"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/joi",children:"joi"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/yup",children:"yup"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/superstruct",children:"superstruct"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/valibot",children:"valibot"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You need to install one of the libraries yourself, ",(0,a.jsx)(n.code,{children:"@mantine/form"})," package does not depend on any of them.\nIf you do not know what schema validation library to choose, use ",(0,a.jsx)(n.a,{href:"https://www.npmjs.com/package/zod",children:"zod"}),",\nit is the most modern and developer-friendly library."]}),"\n",(0,a.jsx)(n.h2,{id:"zod",children:"zod"}),"\n",(0,a.jsx)(n.p,{children:"Installation:"}),"\n",(0,a.jsx)(t,{packages:"zod mantine-form-zod-resolver"}),"\n",(0,a.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { zodResolver } from 'mantine-form-zod-resolver';\nimport { z } from 'zod';\nimport { useForm } from '@mantine/form';\n\nconst schema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name should have at least 2 letters' }),\n  email: z.string().email({ message: 'Invalid email' }),\n  age: z.number().min(18, {\n    message: 'You must be at least 18 to create an account',\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: zodResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"Nested fields validation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { zodResolver } from 'mantine-form-zod-resolver';\nimport { z } from 'zod';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = z.object({\n  nested: z.object({\n    field: z\n      .string()\n      .min(2, { message: 'Field should have at least 2 letters' }),\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: zodResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { zodResolver } from 'mantine-form-zod-resolver';\nimport { z } from 'zod';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = z.object({\n  list: z.array(\n    z.object({\n      name: z\n        .string()\n        .min(2, { message: 'Name should have at least 2 letters' }),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: zodResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"yup",children:"yup"}),"\n",(0,a.jsx)(n.p,{children:"Installation:"}),"\n",(0,a.jsx)(t,{packages:"yup mantine-form-yup-resolver"}),"\n",(0,a.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { yupResolver } from 'mantine-form-yup-resolver';\nimport * as yup from 'yup';\nimport { useForm } from '@mantine/form';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2, 'Name should have at least 2 letters'),\n  email: yup\n    .string()\n    .required('Invalid email')\n    .email('Invalid email'),\n  age: yup\n    .number()\n    .min(18, 'You must be at least 18 to create an account'),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: yupResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"Nested fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { yupResolver } from 'mantine-form-yup-resolver';\nimport * as yup from 'yup';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = yup.object().shape({\n  nested: yup.object().shape({\n    field: yup\n      .string()\n      .min(2, 'Field should have at least 2 letters'),\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: yupResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { yupResolver } from 'mantine-form-yup-resolver';\nimport * as yup from 'yup';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = yup.object().shape({\n  list: yup.array().of(\n    yup.object().shape({\n      name: yup\n        .string()\n        .min(2, 'Name should have at least 2 letters'),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: yupResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"joi",children:"joi"}),"\n",(0,a.jsx)(n.p,{children:"Installation:"}),"\n",(0,a.jsx)(t,{packages:"joi mantine-form-joi-resolver"}),"\n",(0,a.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import Joi from 'joi';\nimport { joiResolver } from 'mantine-form-joi-resolver';\nimport { useForm } from '@mantine/form';\n\nconst schema = Joi.object({\n  name: Joi.string().min(2).messages({\n    'string.min': 'Name should have at least 2 letters',\n    'string.empty': 'Name should have at least 2 letters',\n  }),\n  email: Joi.string()\n    .email({ tlds: { allow: false } })\n    .messages({\n      'string.email': 'Invalid email',\n      'string.empty': 'Invalid email',\n    }),\n  age: Joi.number()\n    .min(18)\n    .message('You must be at least 18 to create an account'),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: joiResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"Nested fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import Joi from 'joi';\nimport { joiResolver } from 'mantine-form-joi-resolver';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = Joi.object({\n  nested: Joi.object({\n    field: Joi.string().min(2).messages({\n      'string.min': 'Field should have at least 2 letters',\n      'string.empty': 'Field should have at least 2 letters',\n    }),\n  }),\n});\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: joiResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import Joi from 'joi';\nimport { joiResolver } from 'mantine-form-joi-resolver';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = Joi.object({\n  list: Joi.array().items(\n    Joi.object({\n      name: Joi.string().min(2).messages({\n        'string.min': 'Name should have at least 2 letters',\n        'string.empty': 'Name should have at least 2 letters',\n      }),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: joiResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"superstruct",children:"superstruct"}),"\n",(0,a.jsx)(n.p,{children:"Installation:"}),"\n",(0,a.jsx)(t,{packages:"superstruct mantine-form-superstruct-resolver"}),"\n",(0,a.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import isEmail from 'is-email';\nimport { superstructResolver } from 'mantine-form-superstruct-resolver';\nimport * as s from 'superstruct';\n\nconst emailString = s.define('email', isEmail);\n\nconst schema = s.object({\n  name: s.size(s.string(), 2, 30),\n  email: emailString,\n  age: s.min(s.number(), 18),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: superstructResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//   name: 'name: Expected a string with a length between `2` and `30` but received one with a length of `0`',\n//   email: 'email: Expected a value of type `email`, but received: `\"\"`',\n//   age: 'age: Expected a number greater than or equal to 18 but received `16`',\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"Nested fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { superstructResolver } from 'mantine-form-superstruct-resolver';\nimport * as s from 'superstruct';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = s.object({\n  nested: s.object({\n    field: s.size(s.string(), 2, 30),\n  }),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: superstructResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'nested field: Expected a string with a length between `2` and `30` but received one with a length of `0`',\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { superstructResolver } from 'mantine-form-superstruct-resolver';\nimport * as s from 'superstruct';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = s.object({\n  list: s.array(\n    s.object({\n      name: s.size(s.string(), 2, 30),\n    })\n  ),\n});\n\nconst form = useForm({\n  mode: 'uncontrolled',\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: superstructResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list 0 name: Expected a string with a length between `2` and `30` but received one with a length of `0`',\n// }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"valibot",children:"valibot"}),"\n",(0,a.jsx)(n.p,{children:"Installation:"}),"\n",(0,a.jsx)(t,{packages:"valibot mantine-form-valibot-resolver"}),"\n",(0,a.jsx)(n.p,{children:"Basic fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { valibotResolver } from 'mantine-form-valibot-resolver';\nimport * as v from 'valibot';\nimport { useForm } from '@mantine/form';\n\nconst schema = v.object({\n  name: v.pipe(\n    v.string(),\n    v.minLength(2, 'Name should have at least 2 letters')\n  ),\n  email: v.pipe(v.string(), v.email('Invalid email')),\n  age: v.pipe(\n    v.number(),\n    v.minValue(18, 'You must be at least 18 to create an account')\n  ),\n});\n\nconst form = useForm({\n  initialValues: {\n    name: '',\n    email: '',\n    age: 16,\n  },\n  validate: valibotResolver(schema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  name: 'Name should have at least 2 letters',\n//  email: 'Invalid email',\n//  age: 'You must be at least 18 to create an account'\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"Nested fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { valibotResolver } from 'mantine-form-valibot-resolver';\nimport * as v from 'valibot';\nimport { useForm } from '@mantine/form';\n\nconst nestedSchema = v.object({\n  nested: v.object({\n    field: v.pipe(\n      v.string(),\n      v.minLength(2, 'Field should have at least 2 letters')\n    ),\n  }),\n});\n\nconst form = useForm({\n  initialValues: {\n    nested: {\n      field: '',\n    },\n  },\n  validate: valibotResolver(nestedSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'nested.field': 'Field should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"List fields validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { valibotResolver } from 'mantine-form-valibot-resolver';\nimport * as v from 'valibot';\nimport { useForm } from '@mantine/form';\n\nconst listSchema = v.object({\n  list: v.array(\n    v.object({\n      name: v.pipe(\n        v.string(),\n        v.minLength(2, 'Name should have at least 2 letters')\n      ),\n    })\n  ),\n});\n\nconst form = useForm({\n  initialValues: {\n    list: [{ name: '' }],\n  },\n  validate: valibotResolver(listSchema),\n});\n\nform.validate();\nform.errors;\n// -> {\n//  'list.0.name': 'Name should have at least 2 letters',\n// }\n"})}),"\n",(0,a.jsx)(n.p,{children:"With TypeScript:"}),"\n",(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.code,{children:"InferInput"})," type from the ",(0,a.jsx)(n.code,{children:"valibot"})," library to get the type of the form data."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { valibotResolver } from 'mantine-form-valibot-resolver';\nimport * as v from 'valibot';\nimport { useForm } from '@mantine/form';\n\nexport const userSchema = v.object({\n  email: v.pipe(v.string(), v.email()),\n});\n\ntype FormData = v.InferInput<typeof userSchema>;\n\nconst form = useForm<FormData>({\n  initialValues: {\n    email: '',\n  },\n  validate: valibotResolver(userSchema),\n});\n"})})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.jsx)(i,{...e,children:(0,a.jsx)(l,{...e})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[67456,85954,90636,46593,38792],()=>n(16961)),_N_E=e.O()}]);