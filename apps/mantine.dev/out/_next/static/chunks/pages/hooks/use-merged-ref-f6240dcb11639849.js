(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[16169],{62023:(e,n,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-merged-ref",function(){return s(96008)}])},96008:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>u});var r=s(31085),o=s(71184),t=s(85954),i=s(38215);let c=(0,t.P)(i.XZ.useMergedRef);function d(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"use-merged-ref"})," accepts any number of refs and returns a function that should be passed to the ",(0,r.jsx)(n.code,{children:"ref"})," prop.\nUse this hook when you need to use more than one ref on a single dom node, for example,\nwhen you want to use ",(0,r.jsx)(n.a,{href:"/hooks/use-click-outside/",children:"use-click-outside"})," and ",(0,r.jsx)(n.a,{href:"/hooks/use-focus-trap/",children:"use-focus-trap"})," hooks and also get a ref for yourself:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useRef } from 'react';\nimport {\n  useClickOutside,\n  useFocusTrap,\n  useMergedRef,\n} from '@mantine/hooks';\n\nfunction Demo() {\n  const myRef = useRef();\n  const useClickOutsideRef = useClickOutside(() => {});\n  const focusTrapRef = useFocusTrap();\n  const mergedRef = useMergedRef(\n    myRef,\n    useClickOutsideRef,\n    focusTrapRef\n  );\n\n  return <div ref={mergedRef} />;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mergerefs-function",children:"mergeRefs function"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"use-merged-ref"})," hooks memoizes refs with ",(0,r.jsx)(n.code,{children:"useCallback"})," hook, but in some cases\nmemoizing is not a valid strategy, for example, when you are working with a list\nof dynamic components React will complain that different number of hooks was called\nacross two renders. To fix that issue, use ",(0,r.jsx)(n.code,{children:"mergeRefs"})," function instead:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useRef } from 'react';\nimport { mergeRefs, useClickOutside } from '@mantine/hooks';\n\nfunction Demo() {\n  const myRef = useRef();\n  const useClickOutsideRef = useClickOutside(() => {});\n  const mergedRef = mergeRefs(myRef, useClickOutsideRef);\n  return <div ref={mergedRef} />;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mergeRefs"})," works the same way as ",(0,r.jsx)(n.code,{children:"use-merged-ref"}),", but does not use hooks internally.\nUse it only when you cannot use ",(0,r.jsx)(n.code,{children:"use-merged-ref"}),". Note that ",(0,r.jsx)(n.code,{children:"mergeRefs"})," will not work\ncorrectly with ",(0,r.jsx)(n.a,{href:"/hooks/use-focus-trap/",children:"use-focus-trap"})," hook, you are required to\nuse ",(0,r.jsx)(n.code,{children:"use-merged-ref"})," with it."]}),"\n",(0,r.jsx)(n.h2,{id:"assignref-function",children:"assignRef function"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"assignRef"})," function can be used to assign refs that are not memoized with ",(0,r.jsx)(n.code,{children:"useCallback"}),".\nIt is usually used to assign refs that do not reference elements:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react';\nimport { assignRef } from '@mantine/hooks';\n\ninterface NumberInputHandlers {\n  increment: () => void;\n  decrement: () => void;\n}\n\ninterface DemoProps {\n  handlersRef?: React.ForwardedRef<NumberInputHandlers | undefined>;\n}\n\nfunction Demo({ handlersRef }: DemoProps) {\n  const [value, setValue] = useState(0);\n\n  const increment = () => setValue((v) => v + 1);\n  const decrement = () => setValue((v) => v - 1);\n\n  assignRef(handlersRef, { increment, decrement });\n\n  return (\n    <>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n    </>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"set-node-type",children:"Set node type"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { useMergedRef } from '@mantine/hooks';\n\nconst ref = useMergedRef<HTMLDivElement>();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"function useMergedRef<T = any>(\n  ...refs: React.ForwardedRef<T>[]\n): (node: T) => void;\n"})})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,r.jsx)(c,{...e,children:(0,r.jsx)(d,{...e})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[67456,85954,90636,46593,38792],()=>n(62023)),_N_E=e.O()}]);